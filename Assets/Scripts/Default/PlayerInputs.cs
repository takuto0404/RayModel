//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Default
{
    public partial class @PlayerInputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""InputControl"",
            ""id"": ""72d17a1f-7eef-4370-9fab-bd0df8138a0e"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""d6f71ec4-2c19-408d-8d2a-4a24614359b9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""f80272fb-019e-456f-9cae-35d65931798e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d03839cf-ec04-41a0-b159-2a406847e746"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0485920a-a968-416d-8716-0cee478d7b26"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // InputControl
            m_InputControl = asset.FindActionMap("InputControl", throwIfNotFound: true);
            m_InputControl_Position = m_InputControl.FindAction("Position", throwIfNotFound: true);
            m_InputControl_Click = m_InputControl.FindAction("Click", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // InputControl
        private readonly InputActionMap m_InputControl;
        private IInputControlActions m_InputControlActionsCallbackInterface;
        private readonly InputAction m_InputControl_Position;
        private readonly InputAction m_InputControl_Click;
        public struct InputControlActions
        {
            private @PlayerInputs m_Wrapper;
            public InputControlActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_InputControl_Position;
            public InputAction @Click => m_Wrapper.m_InputControl_Click;
            public InputActionMap Get() { return m_Wrapper.m_InputControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InputControlActions set) { return set.Get(); }
            public void SetCallbacks(IInputControlActions instance)
            {
                if (m_Wrapper.m_InputControlActionsCallbackInterface != null)
                {
                    @Position.started -= m_Wrapper.m_InputControlActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_InputControlActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_InputControlActionsCallbackInterface.OnPosition;
                    @Click.started -= m_Wrapper.m_InputControlActionsCallbackInterface.OnClick;
                    @Click.performed -= m_Wrapper.m_InputControlActionsCallbackInterface.OnClick;
                    @Click.canceled -= m_Wrapper.m_InputControlActionsCallbackInterface.OnClick;
                }
                m_Wrapper.m_InputControlActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                    @Click.started += instance.OnClick;
                    @Click.performed += instance.OnClick;
                    @Click.canceled += instance.OnClick;
                }
            }
        }
        public InputControlActions @InputControl => new InputControlActions(this);
        public interface IInputControlActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
        }
    }
}
